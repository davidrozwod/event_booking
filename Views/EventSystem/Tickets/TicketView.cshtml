@model event_booking.Models.ViewModels.TicketPriceViewModel
@using Newtonsoft.Json
@using event_booking.Models.ViewModels;

@{
    var discountsJson = JsonConvert.SerializeObject(Model.Discounts);
}

<div class="container">
    <header>
        <h2>@Model.Event.Name</h2>
        <h3>Venue: @Model.Venue.Name</h3>
    </header>

    <div id="ticketsContainer">
        <div class="ticket">
            <form id="ticketForm" asp-action="ConfirmPurchase" method="post">
                <div id="ticketInputs">
                        <h5>Seat: @Model.Seat.SeatNumber</h5>                                  

                    <div>
                        <input type="hidden" name="Tickets[0].TicketId" id="TicketId_0" />

                        <label for="FirstName">First Name:</label>
                        <input type="text" id="FirstName" name="FirstName" placeholder="@ViewBag.FirstName" required />
                        <label for="LastName">Last Name:</label>

                        <input type="text" id="LastName" name="LastName" placeholder="@ViewBag.LastName" required />
                        <label for="DiscountId">Discount:</label>

                        <select id="DiscountId" name="Discount" onchange="recalculatePrice()">
                            @foreach (var discount in Model.DiscountNames)
                            {
                                <option value="@discount.Key">@discount.Value</option>
                            }
                        </select>

                        <label for="TicketPrice">Ticket Price:</label>
                        <input type="text" id="TicketPriceDisplay" value="@Model.Ticket.TicketPrice" disabled />
                        <input type="hidden" id="TicketPrice" name="TicketPrice" value="@Model.Ticket.TicketPrice" />
                    </div>
                </div>
                <input type="hidden" id="PurchaseId" value="@Model.Purchase.PurchaseId" />
                <input type="hidden" id="EventId" value="@Model.Event.EventId" />
                <p id="SessionExpiryTime">@Model.Purchase.SessionExpiryTime</p>
                }

                <button type="button" id="addTicketButton">Add another ticket</button>
                <input type="submit" value="Purchase" />
            </form>
        </div>
    </div>

    <form asp-controller="ESTicketsPage" asp-action="CancelPurchase" method="post">
        <input type="hidden" asp-for="Ticket.TicketId" />
        <input type="submit" value="Cancel Purchase" />
    </form>

</div>

@* Javascript for live price update functionality *@
<script type="text/javascript">
    function recalculatePrice() {
        // Get the selected discount
        var selectedDiscountId = $('#DiscountId').val();
        var discounts = @Html.Raw(discountsJson);

        // Get the discount multiplier from the selected discount
        var discountMultiplier = discounts[selectedDiscountId];

        // Get the base price (this should be passed from your server-side code)
        var basePrice = @Model.Ticket.BasePrice;

        // Calculate the new price
        var newPrice = basePrice * discountMultiplier;

        // Update the price in the form
        $('#TicketPriceDisplay').val(newPrice);
        $('#TicketPrice').val(newPrice);
    }

    // Call the function once when the page loads to set the initial price
    $(document).ready(function () {
        recalculatePrice();
    });
</script>

@* Add ticket javascript *@
<script type="text/javascript">
    // Keep track of the number of tickets
    var ticketIndex = 1;

    document.getElementById('addTicketButton').addEventListener('click', () => {
        // The ticketsContainer should contain all the ticket forms
        const ticketsContainer = document.getElementById('ticketsContainer');

        // Clone the first ticket form and reset its fields
        const newTicketForm = ticketsContainer.children[0].cloneNode(true);
        const inputs = newTicketForm.getElementsByTagName('input');
        for (let i = 0; i < inputs.length; i++) {
            inputs[i].value = '';
        }

        // Update the name attributes to use the new ticketIndex
        const labels = newTicketForm.getElementsByTagName('label');
        for (let i = 0; i < labels.length; i++) {
            const forAttr = labels[i].getAttribute('for');
            labels[i].setAttribute('for', forAttr + '_' + ticketIndex);
        }

        const selects = newTicketForm.getElementsByTagName('select');
        for (let i = 0; i < selects.length; i++) {
            selects[i].setAttribute('name', selects[i].getAttribute('name') + '_' + ticketIndex);
        }

        // Append the new ticket form to the container
        ticketsContainer.appendChild(newTicketForm);

        ticketIndex++;
    });
</script>

