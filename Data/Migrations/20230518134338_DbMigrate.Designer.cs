// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using event_booking.Data;

#nullable disable

namespace event_booking.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230518134338_DbMigrate")]
    partial class DbMigrate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUserEvent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUserEvent");
                });

            modelBuilder.Entity("ApplicationUserOrganizer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUserOrganizer");
                });

            modelBuilder.Entity("ApplicationUserVenue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUserVenue");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TicketVip", b =>
                {
                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<int>("VipId")
                        .HasColumnType("int");

                    b.HasKey("TicketId", "VipId");

                    b.HasIndex("VipId");

                    b.ToTable("TicketVip");
                });

            modelBuilder.Entity("UserEventFollow", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("EventID");

                    b.HasKey("Id", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("User_Event_Follow", (string)null);
                });

            modelBuilder.Entity("UserOrganizerFollow", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizerID");

                    b.HasKey("Id", "OrganizerId");

                    b.HasIndex("OrganizerId");

                    b.ToTable("User_Organizer_Follow", (string)null);
                });

            modelBuilder.Entity("UserVenueFollow", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<int>("VenueId")
                        .HasColumnType("int")
                        .HasColumnName("VenueID");

                    b.HasKey("Id", "VenueId");

                    b.HasIndex("VenueId");

                    b.ToTable("User_Venue_Follow", (string)null);
                });

            modelBuilder.Entity("event_booking.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Document")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("Picture")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("event_booking.Models.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<string>("DiscountName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("PriceMultiplier")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("DiscountId")
                        .HasName("PK_TicketPricing");

                    b.ToTable("Discount", null, t =>
                        {
                            t.HasComment("Ticket Pricing Information");
                        });
                });

            modelBuilder.Entity("event_booking.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("EarlyBirdCutoff")
                        .HasColumnType("date");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("date");

                    b.Property<int>("EventCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("date");

                    b.HasKey("EventId");

                    b.HasIndex("EventCategoryId");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("event_booking.Models.EventCategory", b =>
                {
                    b.Property<int>("EventCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("EventCategoryId");

                    b.ToTable("EventCategories");
                });

            modelBuilder.Entity("event_booking.Models.GroupDiscount", b =>
                {
                    b.Property<int>("GroupDiscountId")
                        .HasColumnType("int");

                    b.Property<string>("GroupName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("MinimumAdults")
                        .HasColumnType("int");

                    b.Property<int?>("MinimumChildren")
                        .HasColumnType("int");

                    b.Property<int?>("PriceMultiplier")
                        .HasColumnType("int");

                    b.HasKey("GroupDiscountId");

                    b.ToTable("GroupDiscounts", null, t =>
                        {
                            t.HasComment("Discounts on groups");
                        });
                });

            modelBuilder.Entity("event_booking.Models.JunctionTicketVip", b =>
                {
                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<int>("VipId")
                        .HasColumnType("int");

                    b.HasKey("TicketId", "VipId");

                    b.HasIndex("VipId");

                    b.ToTable("JunctionTicketVips");
                });

            modelBuilder.Entity("event_booking.Models.Loyalty", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("PriceMultiplier")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TicketCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Loyalties");
                });

            modelBuilder.Entity("event_booking.Models.Organizer", b =>
                {
                    b.Property<int>("OrganizerId")
                        .HasColumnType("int");

                    b.Property<string>("ContactInfo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Image")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("OrganizerCategoryId")
                        .HasColumnType("int");

                    b.HasKey("OrganizerId")
                        .HasName("PK_HostsOrganizers");

                    b.HasIndex("OrganizerCategoryId");

                    b.ToTable("Organizers");
                });

            modelBuilder.Entity("event_booking.Models.OrganizerCategory", b =>
                {
                    b.Property<int>("OrganizerCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("OrganizerCategoryId")
                        .HasName("PK_HostOrganizerCategories");

                    b.ToTable("OrganizerCategories");
                });

            modelBuilder.Entity("event_booking.Models.Purchase", b =>
                {
                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.HasKey("PurchaseId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("event_booking.Models.Sale", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("date");

                    b.Property<int>("SaleId")
                        .HasColumnType("int");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("event_booking.Models.Seat", b =>
                {
                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.Property<string>("SeatNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<int>("VenueId")
                        .HasColumnType("int")
                        .HasComment("Seats Information");

                    b.HasKey("SeatId");

                    b.HasIndex("SectionId");

                    b.HasIndex("VenueId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("event_booking.Models.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceMultiplier")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SectionName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SectionId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("event_booking.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TicketPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TicketTypeId")
                        .HasColumnType("int");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("Id");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("SeatId");

                    b.HasIndex("TicketTypeId");

                    b.HasIndex("VenueId");

                    b.HasIndex(new[] { "EventId", "SeatId" }, "Ticket_Unique_Index")
                        .IsUnique();

                    b.ToTable("Tickets", null, t =>
                        {
                            t.HasComment("Event Tickets");
                        });
                });

            modelBuilder.Entity("event_booking.Models.TicketGroup", b =>
                {
                    b.Property<int>("TicketGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("GroupDiscountId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseId")
                        .HasColumnType("int");

                    b.HasKey("TicketGroupId");

                    b.HasIndex("GroupDiscountId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("TicketGroups");
                });

            modelBuilder.Entity("event_booking.Models.TicketType", b =>
                {
                    b.Property<int>("TicketTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceMultiplier")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TypeName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TicketTypeId")
                        .HasName("PK_UserFollows");

                    b.ToTable("TicketTypes");
                });

            modelBuilder.Entity("event_booking.Models.Venue", b =>
                {
                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Location")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("SeatCapacity")
                        .HasColumnType("int")
                        .HasColumnName("Seat Capacity");

                    b.HasKey("VenueId");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("event_booking.Models.Vip", b =>
                {
                    b.Property<int>("VipId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("VipName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("VipPrice")
                        .HasColumnType("int");

                    b.HasKey("VipId")
                        .HasName("PK_VIPAccess");

                    b.HasIndex("EventId");

                    b.HasIndex(new[] { "VipId", "EventId" }, "VIP_Unique_Index")
                        .IsUnique();

                    b.ToTable("VIP", null, t =>
                        {
                            t.HasComment("VIP Area");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("event_booking.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("event_booking.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("event_booking.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("event_booking.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketVip", b =>
                {
                    b.HasOne("event_booking.Models.Ticket", null)
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("event_booking.Models.Vip", null)
                        .WithMany()
                        .HasForeignKey("VipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserEventFollow", b =>
                {
                    b.HasOne("event_booking.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Event_Follow_Events_1");

                    b.HasOne("event_booking.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .IsRequired()
                        .HasConstraintName("FK_User_Event_Follow_ApplicationUser");
                });

            modelBuilder.Entity("UserOrganizerFollow", b =>
                {
                    b.HasOne("event_booking.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .IsRequired()
                        .HasConstraintName("FK_User_Organizer_Follow_ApplicationUser");

                    b.HasOne("event_booking.Models.Organizer", null)
                        .WithMany()
                        .HasForeignKey("OrganizerId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Organizer_Follow_Organizers_1");
                });

            modelBuilder.Entity("UserVenueFollow", b =>
                {
                    b.HasOne("event_booking.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .IsRequired()
                        .HasConstraintName("FK_User_Venue_Follow_ApplicationUser");

                    b.HasOne("event_booking.Models.Venue", null)
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Venue_Follow_Venue_1");
                });

            modelBuilder.Entity("event_booking.Models.Event", b =>
                {
                    b.HasOne("event_booking.Models.EventCategory", "EventCategory")
                        .WithMany("Events")
                        .HasForeignKey("EventCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Events_EventCategories");

                    b.HasOne("event_booking.Models.Organizer", "Organizer")
                        .WithMany("Events")
                        .HasForeignKey("OrganizerId")
                        .IsRequired()
                        .HasConstraintName("FK_Events_Organizers");

                    b.Navigation("EventCategory");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("event_booking.Models.JunctionTicketVip", b =>
                {
                    b.HasOne("event_booking.Models.Ticket", "Ticket")
                        .WithMany("JunctionTicketVips")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_JunctionTicketVip_Tickets");

                    b.HasOne("event_booking.Models.Vip", "Vip")
                        .WithMany("JunctionTicketVips")
                        .HasForeignKey("VipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_JunctionTicketVip_Vips");

                    b.Navigation("Ticket");

                    b.Navigation("Vip");
                });

            modelBuilder.Entity("event_booking.Models.Loyalty", b =>
                {
                    b.HasOne("event_booking.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Loyalty")
                        .HasForeignKey("event_booking.Models.Loyalty", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_Loyalty_ApplicationUser");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("event_booking.Models.Organizer", b =>
                {
                    b.HasOne("event_booking.Models.OrganizerCategory", "OrganizerCategory")
                        .WithMany("Organizers")
                        .HasForeignKey("OrganizerCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Organizers_OrganizerCategories");

                    b.Navigation("OrganizerCategory");
                });

            modelBuilder.Entity("event_booking.Models.Sale", b =>
                {
                    b.HasOne("event_booking.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Sales")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Sales_Application");

                    b.HasOne("event_booking.Models.Purchase", "Purchase")
                        .WithMany("Sales")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Sales_Purchase_1");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("event_booking.Models.Seat", b =>
                {
                    b.HasOne("event_booking.Models.Section", "Section")
                        .WithMany("Seats")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Seats_Section");

                    b.HasOne("event_booking.Models.Venue", "Venue")
                        .WithMany("Seats")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Seats_Venue");

                    b.Navigation("Section");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("event_booking.Models.Ticket", b =>
                {
                    b.HasOne("event_booking.Models.Discount", "Discount")
                        .WithMany("Tickets")
                        .HasForeignKey("DiscountId")
                        .HasConstraintName("FK_Tickets_Discount_4");

                    b.HasOne("event_booking.Models.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_Tickets_Events");

                    b.HasOne("event_booking.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Tickets")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Tickets_ApplicationUser_3");

                    b.HasOne("event_booking.Models.Purchase", "Purchase")
                        .WithMany("Tickets")
                        .HasForeignKey("PurchaseId")
                        .HasConstraintName("FK_Tickets_Purchase_6");

                    b.HasOne("event_booking.Models.Seat", "Seat")
                        .WithMany("Tickets")
                        .HasForeignKey("SeatId")
                        .IsRequired()
                        .HasConstraintName("FK_Tickets_Seats_2");

                    b.HasOne("event_booking.Models.TicketType", "TicketType")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketTypeId")
                        .HasConstraintName("FK_Tickets_TicketType_5");

                    b.HasOne("event_booking.Models.Venue", "Venue")
                        .WithMany("Tickets")
                        .HasForeignKey("VenueId")
                        .IsRequired()
                        .HasConstraintName("FK_Tickets_Venue_1");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Discount");

                    b.Navigation("Event");

                    b.Navigation("Purchase");

                    b.Navigation("Seat");

                    b.Navigation("TicketType");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("event_booking.Models.TicketGroup", b =>
                {
                    b.HasOne("event_booking.Models.GroupDiscount", "GroupDiscount")
                        .WithMany("TicketGroups")
                        .HasForeignKey("GroupDiscountId")
                        .HasConstraintName("FK_TicketGroup_GroupDiscounts_1");

                    b.HasOne("event_booking.Models.Purchase", "Purchase")
                        .WithMany("TicketGroups")
                        .HasForeignKey("PurchaseId")
                        .HasConstraintName("FK_TicketGroup_Purchase");

                    b.Navigation("GroupDiscount");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("event_booking.Models.Vip", b =>
                {
                    b.HasOne("event_booking.Models.Event", "Event")
                        .WithMany("Vips")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_VIP_Events");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("event_booking.Models.ApplicationUser", b =>
                {
                    b.Navigation("Loyalty");

                    b.Navigation("Sales");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("event_booking.Models.Discount", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("event_booking.Models.Event", b =>
                {
                    b.Navigation("Tickets");

                    b.Navigation("Vips");
                });

            modelBuilder.Entity("event_booking.Models.EventCategory", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("event_booking.Models.GroupDiscount", b =>
                {
                    b.Navigation("TicketGroups");
                });

            modelBuilder.Entity("event_booking.Models.Organizer", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("event_booking.Models.OrganizerCategory", b =>
                {
                    b.Navigation("Organizers");
                });

            modelBuilder.Entity("event_booking.Models.Purchase", b =>
                {
                    b.Navigation("Sales");

                    b.Navigation("TicketGroups");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("event_booking.Models.Seat", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("event_booking.Models.Section", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("event_booking.Models.Ticket", b =>
                {
                    b.Navigation("JunctionTicketVips");
                });

            modelBuilder.Entity("event_booking.Models.TicketType", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("event_booking.Models.Venue", b =>
                {
                    b.Navigation("Seats");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("event_booking.Models.Vip", b =>
                {
                    b.Navigation("JunctionTicketVips");
                });
#pragma warning restore 612, 618
        }
    }
}
